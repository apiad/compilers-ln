---
previous-chapter: chap7
---

# El lenguaje HULK

```python echo=False
import sys
import os

sys.path.append(os.path.abspath(os.curdir))

from source.diagrams import Pipeline
```

En este capítulo definimos el lenguaje **HULK** (_Havana University Language for Kompilers_), un lenguaje de programación didáctico diseñado para este curso.
A grandes razgos, **HULK** es un lenguaje orientado a objetos, con herencia simple, polimorfismo, y encapsulamiento a nivel de clases.
Además en **HULK** es posible definir funciones globales fuera del contexto de cualquier clase.
También es posible definir _una única expresión global_ que constituye el punto de entrada al programa.

La mayoría de las construcciones sintácticas en **HULK** son expresiones, incluyendo las instrucciones condicionales y los ciclos.
**HULK** es un lenguaje estáticamente tipado con inferencia de tipos, lo que significa que algunas (o todas) las partes de un programa pueden ser anotadas con tipos, y el compilador verificará la consistencia de todas las operaciones.

El lenguaje **HULK** ha sido diseñado para ser utilizado como mecanismo de aprendizaje y evaluación de un curso de Compilación. Por tal motivo, ciertas decisiones de diseño de lenguaje responden más a cuestiones didácticas que a cuestiones teóricas o pragmáticas. Un ejemplo ilustrativo es la inclusión de un solo tipo numérico básico. En la práctica los lenguajes de programación cuentan con varios tipos numéricos (`int`, `float`, `double`, `decimal`) para cubrir el amplio rango de _trade-off_ entre eficiencia y expresividad. Sin embargo, desde el punto de vista didáctico, ya es suficiente complejidad el tener que lidiar con un tipo numérico, y la inclusión de otros no aporta nada nuevo desde nuestro punto de vista.

Otra decisión importante es el tipado estático con inferencia de tipos, que será explicado más adelante en detalle. La motivación detrás de esta característica es permitir a los estudiantes implementar primero un evaluador para el lenguaje, y luego preocuparse por la verificación de tipos. Así mismo, la decisión de tener expresiones globales, funciones globales, y clases, responde a la necesidad de introducir los diversos elementos del lenguaje poco a poco. Al tener expresiones globales, es posible implementar un intérprete de expresiones sin necesidad de resolver los problemas de contexto. Luego se pueden introducir las funciones y finalmente las características orientadas a objetos. De esta forma los estudiantes pueden ir aprendiendo sobre la marcha a medida que adicionan características al lenguaje, siempre teniendo un subconjunto válido del lenguaje implementado.

## Elementos básicos del lenguaje de HULK

El programa más sencillo en **HULK** es, por supuesto, _Hola Mundo_:

```HULK
print("Hola Mundo");
```

En **HULK** un programa puede ser simplemente una expresión (terminada en `;`), en este caso, la invocación de una función global llamada `print` (que se presentará más adelante). La cadena de texto `"Hola Mundo"` es un literal del tipo `String`, definido en la biblioteca estándar, que se comporta de la forma convencional en la mayoría de los lenguajes de programación más populares: es inmutable, y codificado en UTF8.

### Tipos básicos

Además de los literales de cadena, en **HULK** hay 2 tipos básicos adicionales: `Number`, que representa valores numéricos y `Boolean` que representa valores de verdad (con los literales usuales `True` y `False`).

El tipo `Number` representa tanto números enteros, como números con coma flotante. La semántica concreta dependerá de la arquitectura. Siempre que sea posible se representará con un valor entero de 64 (o 32) bits, o en su defecto, un valor flotante de 64 (o 32) bits, según permita la arquitectura. Las constantes numéricas se pueden escribir como `42` (valor entero) o `3.14` (valor flotante).

**HULK** tiene una jerarquía de tipos unificada, cuya raíz es el tipo `Object`. Todos los demás tipos definidos en el lenguaje son concretos.

### Expresiones elementales

En **HULK** se definen todas las expresiones usuales, en orden decreciente de precedencia:

- Operaciones lógicas entre expresiones de tipo `Boolean`: `a & b`, `a | b`, `!a`, siempre evaluadas con cortocircuito.
- Operaciones aritméticas entre expresiones de tipo `Number`: `-a`, `a % b`, `a * b`, `a / b`, `a + b`, `a - b`, con la precedencia y asociatividad usuales, y agrupamiento mediante paréntesis. El resultado es de tipo `Number` siempre.
- Comparaciones entre expresiones de tipo `Number`: `a < b`, `a > b`, `a <= b`, `a >= b`, con menor precedencia que las aritméticas, y sin asociatividad.
- Comparaciones de igualdad entre expresiones de cualquier tipo: `a == b`, `a != b`, con la semántica de igualdad por valor entre expresiones de tipo `Number`, `String` o `Boolean`, e igualdad por referencia en todos los demás tipos. Se permite comparar expresiones de cualquier tipo, y si sus tipos no son compatibles (e.j, `"Hola Mundo" == 42`) el resultado será `False`.
- El operador infijo `@` de concatenación entre `String`: `"Hello "@"World" == "Hello World"`. Para los casos donde es conveniente, el operador `@@` adiciona un espacio intermedio: `"Hello"@@"World" == "Hello World"`.

En el espacio de nombres global siempre se encontrarán además las funciones `print`, `read` y `parse`, además de una serie de funciones elementales matemáticas, tales como `exp`, `pow`, `log`, `sqrt`, `min` y `max`.

El valor `Null` es un valor especial que puede tener cualquier tipo, excepto `Number` y `Boolean`. `Null` representa la no existencia de una instancia asociada a la variable (_l-value_ en caso general) correspondiente, y cualquier operación que se intente sobre un valor `Null` lanzará un error en tiempo de ejecución, excepto `==`,que siempre devuelve `False`, y `!=` (que siempre devuelve `True`, incluso entre expresiones ambas iguales a `Null`. El literal `Null` es una expresión de tipo `Object` con valor igual a `Null`.

### Variables

Las variables en **HULK** se introducen con una expresión `let`:

```HULK
let <var>[:<type>]=<init> in <body>
```

La semántica de la expresión `let` consiste en que se crea un nuevo ámbito donde se define la variable `<var>` cuyo valor es el resultado de evaluar `<init>`, y se evalua en este ámbito la expresión `<body>`.

```HULK
let msg:String="Hola Mundo" in print(msg)
```

Como se verá, indicar el tipo de una variable al declararla es opcional. Los detalles de la inferencia y verificación de tipos se darán más adelante.

Existe una variante extendida de la expresión `let` en la que se permite introducir más de una variable:

```HULK
let x=1, y=2, z=3 in x+(y*z)
```

Esta variante es semánticamente idéntica a:

```HULK
let x=1 in let y=2 in let z=3 in x+(y*z)
```

El cuerpo de una expresión `let` puede ser también una _lista de expresiones_, encerradas entre `{` y `}` y separadas por `;`, siendo el valor final de la expresión `let` el valor de la última expresión de la lista.

```HULK
let x=0 in {
    print(x==0); # Imprime True
    print(x==1); # Imprime False
}
```

Una _lista de expresiones_ **no es** una expresión en sí, es decir, no puede ser usada donde quiera que se requiera una expresión. Solamente se puede usar en el cuerpo de algunas construcciones sintácticas que se irán introduciendo poco a poco.
Es decir, el siguiente ejemplo **no es válido**:

```HULK
let x={0;1} in print(x) # NO es válido
```

Como tampoco lo es:

```HULK
{1;2} + {3;4;let x=5 in 5} # NO es válido
```

Ni ningún otro ejemplo similar donde se use un bloque de expresiones como una expresión, excepto en los contextos donde se indique explícitamente más adelante.

### Asignación

La asignación en **HULK** se realiza con el operador `:=`, y solamente es posible asignar a una variable que exista en el contexto actual:

```HULK
let color="green" in {
    print(color);    # Imprime green
    color:="blue";
    print(color);    # Imprime blue
}
```

La asignación devuelve el valor asignado, y asocia a la derecha. Tiene menor prioridad que todas las expresiones aritméticas:

```HULK
let x=0, y=0 in {
    y := x := 5 + 5;
    print(x); # 10
    print(y); # 10
    y := (x := 5) + 1;
    print(x); # 5
    print(y); # 6
}
```

### Espacios en blanco e indentación

En **HULK** los espacios en blanco no son significativos, ni tampoco la indentación. La sintaxis del lenguaje permite indicar explícitamente, cuando es necesario, el ámbito de un bloque de código. El ejemplo anterior es equivalente a:

```HULK
let x=1 in
let y=2 in
let z=3 in
    x + (y * z)
```

O cualquier otra forma de indentar que sea conveniente.

### Identificadores

Los identificadores empiezan con un caracter del alfabeto ASCII (o `_`) y pueden opcionalmente contener números. Ejemplos de identificadores válidos son:

```HULK
x
name
CamelCase
smallCamelCase
snake_case
_ugly_case
hunter42
```

### Funciones

**HULK** soporta funciones globales con 2 formas sintácticas muy similares. Una función se define por un nombre, argumentos con tipo opcional, un tipo de retorno también opcional, y el cuerpo.
Todas las funciones globales deben ser definidas **antes** de la expresión global que define el _cuerpo_ del programa.

En la primera forma sintáctica, que llamamos "compacta", el cuerpo de la función debe ser exactamente una expresión (terminada en `;`):

```HULK
function isEven(n:Number):Boolean -> n % 2 == 0;
```

En la segunda forma, que llamaremos "extendida", el cuerpo de una función puede ser una _lista de expresiones_ separadas por `;`. El valor de retorno de la función es el valor de la última expresión de la lista. En esta notación **no se incluye** un `;` al final de la declaración de la función.

```HULK
function f(a, b, c) {
    a := b + c;
    b := c + a;
    c := a + b;
}

let a=1, b=2, c=3 in print(f(a,b,c)); # Imprime 13
```

En **HULK** no existe una instrucción ni palabra reservada con semántica similar a `return`. Todas las funciones tienen un tipo de retorno y devuelven siempre un valor, aunque este valor puede ser `Null`.

### Condicionales

Las expresiones condicionales se introducen con la sintaxis siguiente:

```HULK
if (<cond>) <body> [elif (<cond>) <body>]* [else <body>]?
```

Es decir, una parte `if`, seguida de cero o más partes `elif` y finalmente una parte `else` opcional.
Una expresión `if` devuelve el valor de la parte que se ejecuta. Si no se ejecuta ninguna (no hay else), devolverá `Null`. Si esto invalida la consistencia de tipos (como se verá más adelante), será necesario definir una parte `else` para garantizar al compilador/intérprete el tipo esperado.

```HULK
function fib(n) -> if (n <= 1) 1 else fib(n-1) + fib(n-2);
```

Al igual que con las expresiones `let` y las funciones, cada cuerpo puede ser o bien una expresión o una lista de expresiones. Si no hay parte `else` y ninguna rama condicional se ejecuta, se devuelve `Null`.

### Ciclos

La expresión de ciclo más general en **HULK** es un ciclo `while` con la semántica común:

```HULK
while (<cond>) <body>
```

Como ya es usual, `<body>` puede ser una expresión o una lista de expresiones.

```HULK
function gcd(a, b) {
    let q = a%b in while (q != 0) {
        a := b;
        b := q;
        q := a%b;
    };

    b;
}
```

El valor de retorno de la expresión `while` es el valor de retorno del cuerpo la última vez que se ejecutó el ciclo, o `Null` en caso de que nunca se ejecute. Si es necesario, se puede adicionar una cláusula `else` para definir el valor cuando no haya ejecución.

Con esta expresión, la manera más sencilla de implementar un contador (el común ciclo `for`) es:

```HULK
let i=0 in while (i < n) {
    # ...
    i := i+1;
}
```

### Arrays

En **HULK** existe un tipo nativo con semántica similar al _array_ de los lenguajes de programación de la familia C. Este _array_ **no crece** dinámicamente y **no es covariante** en la asignación. El _array_ es el único tipo genérico que existe en **HULK**, y se declara con una sintaxis especial. Como es de esperar, un _array_ se indiza con una expresión de tipo `Number` y el valor del primer índice es `0`. Para los efectos del sistema de tipos, todo tipo _array_ hereda directamente de `Object`, y no se puede heredar de él.

```HULK
let a:Number[] = {1, 2, 3, 4}, i:Number=0 in while (i < a.size()) {
    print(a[i]);
    i := i+1;
}
```

La forma de crear un array vacío es mediante la sintaxis:

```HULK
let x = new Number[20] in ...
```

Todo _array_ se inicializa con el valor por defecto del tipo correspondiente, que es `0` para `Number`, `False` para `Boolean`, y `Null` para cualquier otro tipo. En **HULK** no existen _arrays_ multidimensionales, pero sí es posible crear _arrays_ de _arrays_ (_ad infinitum_):

```HULK
let x = new Number[][10] in ...
```

En este caso, el único _array_ que se inicializa es el más externo. Cada valor de `x[i]` se inicializa con `Null` y debe asignarse explícitamente:

```HULK
let x = new Number[][10], n=0 in while(n<x.size()) {
    x[i] := new Number[i+1];
}
```

El tipo de un _array_ complejo como el anterior sería `Number[][]`.

### Inicialización automática de _arrays_

Cuando se instancia un _array_, es posible inicializarlo automáticamente mediante la sintaxis:

```HULK
new <type>[<length>] { <index> -> <expr> }
```

Donde `<expr>` es una expresión que devuelve el valor del i-ésimo elemento, indizado por la variable `<index>`. Por ejemplo:

```HULK
new Number[20]{ i -> 2*i+1 }
```

Es equivalente a:

```HULK
let x = new Number[20], i=0 in while (i<x.size()) {
    x[i] := 2*i+1;
    i := i+1;
    x;
}
```

La expresión de inicialización es un atajo sintáctico para no escribir un ciclo de inicialización. Por tal motivo, se comporta exactamente igual que dicho ciclo. Esta expresión crea un nuevo contexto donde se define la variable `<index>`. Este contexto es hijo del contexto donde se crea el _array_. En particular, **tiene acceso** a la variable que referencia al propio _array_ (en caso de existir). Por ejemplo, la siguiente expresión es válida:

```HULK
let x = new Number[20]{ i -> if (i<=1) 0 else x[i-1] + x[i-2] }
```

Pues es equivalente a:

```HULK
let x = new Number[20], i=0 in while (i<x.size()) {
    x[i] := if (i<=1) 0 else x[i-1] * x[i-2];
    i := i+1;
    x;
}
```

De esta forma es posible inicializar _arrays_ complejos en una sola expresión, como en el ejemplo siguiente:

```HULK
new Number[][100] { i -> new Number[100] { j -> i*j } }
```

Que es equivalente a:

```HULK
let x = new Number[][100], i=0 in while (i<x.size()) {
    x[i] := new Number[100];
    let j=0 in while (j < x[i].size()) {
        x[i][j] := i * j;
        j := j+1;
    };
    i := i+1;
    x;
}
```

Todos los _arrays_ en **HULK** tienen semántica de enlace por referencia.

### Lidiando con valores `Null`

Si una variable tiene valor `Null`, se lanzará un error en tiempo de ejecución si se intenta cualquier operación sobre ella (expecto `==` y `!=`). Siempre es posible evitar esto comprobando explícitamente:

```HULK
if (x != Null) x.value else 0
```

Para estos casos, **HULK** introduce una sintaxis específica:

```HULK
with (<expr> as <id>) <expr> [else <expr>]
```

Por ejemplo, en este caso:

```HULK
with (x as o) o.value else 0
```

La ventaja de esta sintaxis es que dentro del cuerpo de `with` se garantiza que `<id>` nunca será `Null`. Además, la variable `<id>` es **una referencia de de solo lectura** a la expresión `<expr>`, y el compilador impide que se le hagan asiganciones. De modo que es posible garantizar que este código nunca lanzará excepción en tiempo de ejecución por accesos o usos de `<id>`.

### Prioridad de las expresiones

Las expresiones `let`, `if`, `while`, `case` y `with` tienen **menor prioridad** que todas las expresiones elementales (aritméticas, etc.), y siempre asocian a la derecha. Por lo tanto, para poder usar una de estas expresiones dentro de una expresión aritmética, por ejemplo, se deben encerrar entre paréntesis.

Por ejemplo, el siguiente es un caso común:

```HULK
let x=5 in let y=8 in x+y
```

Que es equivalente a:

```HULK
let x=5 in (let y=8 in (x+y))
```

Sin embargo, el siguiente caso **no es válido**, pues no se puede sumar con `let` sin parentizar (`let` tiene menor prioridad):

```HULK
let x=5 in x + let y=8 in y # NO es valido
```

La forma correcta es:

```HULK
let x=5 in x + (let y=8 in y)
```

Por último, el bloque `else` siempre asocia al `if` (o `while`) más cercano.
Es decir, la siguiente expresión:

```HULK
if (a) if (b) y else z
```

Es no ambigua, y equivalente a:

```HULK
if (a) (if (b) y else z)
```

Por otro lado, la invocación de funciones, instanciación, el acceso a miembros (e.g., `self.x`) y el indizado en _arrays_ tienen mayor prioridad que todas las expresiones elementales aritméticas.

## Orientación a objetos en HULK

Además de las características estructuradas y funcionales presentadas, el lenguaje **HULK** soporta el concepto de _tipo_, implementado mediante _clases_. Todos los valores creados en un programa de **HULK** tienen un tipo asociado, y este tipo no puede ser cambiado en tiempo de ejecución. Por esto decimos que **HULK** es un lenguaje con tipado estático.

Aparte de los tipos nativos presentados (`Number`, `Boolean` y `String`), es posible definir nuevos tipos mediante la sintaxis:

```HULK
class <name>[<args>] [is <base>[<init>]] {
    [<attribute>;]*
    [<method>]*
}
```

Todas las clases deben ser definidas **antes** que todas las funciones globales, pero esto _no impide_ que dentro del cuerpo de un método en una clase (explicado más adelante), se llame a una función global, o se use una clase definida posteriormente.

Todas las clases en **HULK** heredan de una clase base. En caso de no especificarse, esta clase será `Object`, que es la raíz de la jerarquía de tipos en **HULK**. Los tipos básicos `Number`, `String` y `Boolean` también heredan de `Object`, pero a diferencia del resto de las clases, **no es permitido heredar de los tipos básicos**. Esto se restringe ya que los tipos básicos generalmente se implementan de forma especial para garantizar una mayor eficiencia, y por lo tanto deben ser tratados con cuidado en la jerarquía de tipos.

### Atributos y métodos

Dentro del cuerpo de una clase se pueden definir dos tipos de elementos: atributos y métodos.
Los atributos se definen con un nombre, un tipo opcional, y una expresión de inicializacion _obligatoria_ (terminado en `;`):

```HULK
class Point {
    x:Number = 0;
    y:Number = 0;
}
```

Todos los atributos en **HULK** son **privados**, es decir, no está permitido acceder a ellos desde otras clases, ni desde clases herederas.

Los métodos se definen con una sintaxis muy similar a las funciones globales. La única diferencia es que en el contexto de un método siempre existe una variable implícita `self` que referencia a la instancia en cuestión. Es obligatorio acceder a los atributos y métodos de una clase a través de `self`, **nunca** usando su nombre directamente.

```HULK
class Point {
    x:Number = 0;
    y:Number = 0;

    translate(x,y) -> Point(self.x + x, self.y + y);
    length() -> sqrt(self.x * self.x + self.y * self.y);
}
```

Todos los atributos deben ser definidos **antes** que todos los métodos, y sus expresiones de inicialización no pueden utilizar métodos de la propia clase, ni valores de otros atributos (aunque sí pueden utilizar funciones globales). Todos los métodos en **HULK** son **públicos** y **virtuales**, redefinibles por los herederos. Además, todos los métodos son de instancia, no existen métodos estáticos, y no existe sintaxis para invocar a un método que no sea a través de una referencia a una instancia de una clase.

### Instanciando clases

Para obtener una instancia de una clase en **HULK** se utiliza el nombre de la clase como si fuera un método, precedido la palabra clave `new`.

```HULK
let p = new Point() in print(p.translate(5,3).length());
```

Si se desea inicializar los atributos de la clase, se pueden definir _argumentos de clase_, y su valor usarse en la inicialización de los atributos:

```HULK
class Point(x:Number, y:Number) {
    x:Number = x;
    y:Number = y;
    # ...
}
```

Una vez definidos argumentos de clase, es obligatorio proporcionar su valor al construir la clase:

```HULK
let p = new Point(5,3) in print(p.length());
```

### Redefinición y polimorfismo

En **HULK** todas las invocaciones a métodos de una instancia son polimórficas. Todos los métodos en **HULK** son virtuales, y pueden ser redefinidos, siempre que se mantenga la misma signatura (cantidad y tipo de los parámetros y retorno). La redefinición se realiza implícitamente si se define en una clase heredera un método con el mismo nombre de una clase ancestro.

```HULK
class Person(name:String) {
    name:String=name;
    def greet() -> "Hello" @@ self.name;
}

class Colleague is Person {
    greet() -> "Hi" @@ self.name;
}
```

Al heredar de una clase se heredan por defecto las definiciones de los argumentos de clase. Por lo tanto, al instanciar una clase heredera, es obligatorio proporcionar los valores de los argumentos:

```HULK
let p = new Colleague("Pete") in print(p.greet()); # Hi Pete
```

Sin embargo, **no está permitido** usar estos argumentos de clase implícitos en la inicialización de atributos de una clase heredera. Si es necesario usarlos, se pueden redefinir explícitamente en la clase heredera. Por otro lado, siempre que se redefinan argumentos de clase en una clase heredera, será necesario indicar explícitamente cómo se evaluan los argumentos de la clase padre en términos de los argumentos de la clase heredera:

```HULK
class Noble(title:String, who:String) is Person(title @@ who) { }

let p = new Noble("Sir", "Thomas") in print(p.greet()); # Hello Sir Thomas
```

### Evaluando el tipo dinámico

La expresión `case` permite comparar el tipo dinámico de una expresión con una lista de tipos posibles. Su sintaxis es la siguiente:

```HULK
case <expr> of {
    [<id>:<type> -> <body> ;]+
}
```

Esta expresión compara el tipo dinámico de `<expr>` contra cada uno de los tipos `<type>`, y ejecuta el `<body>` correspondiente a la rama del ancestro más cercano:

```HULK
class A { }
class B is A { }
class C is B { }
class D is A { }

case new C() of {
    a:A -> print("A");
    b:B -> print("B"); # Se ejecuta esta rama
    d:D -> print("D");
}
```

En caso de ninguna rama ser válida en tiempo de ejecución, se lanza un error. En caso de poderse inferir el tipo de `<expr>`, se intentará validar la compatibilidad con los tipos `<type>`, y se lanzará un error semántico de existir. El cuerpo de una rama cualquiera puede ser una lista de expresiones entre `{` y `}` si fuera necesario, como sucede con las funciones.

Existe una versión compacta también de `case` cuando hay una sola rama, con la forma:

```HULK
case <expr> of <id>:<type> -> <body>
```

Esta forma puede usarse para evaluar un "downcast" en **HULK**, cuando se conoce con certeza el tipo dinámico de un objeto.

Por ejemplo, el siguiente programa lanza error semántico pues `o` es de tipo estático `Object`, explícitamente declarado, por lo que no se puede sumar.

```HULK
function dunno():Object -> 40;

let o:Object = something() in o + 2; # error semántico
```

Sin embargo, usando `case` se puede forzar al verificador de tipos a que infiera `Number` para esta expresión, lanzando error en tiempo de ejecución si realmente el tipo dinámico fuera otro.

```HULK
function dunno():Object -> 40;

let o:Object = something() in case o of y:Number -> y + 2;
```

### Verificación e inferencia de tipos

Un programa en **HULK** no necesita especificar todas las anotaciones de tipos, si son inferibles dado el contexto. Formalizar precisamente en qué casos es posible inferir o no el tipo de una declaración es un problema complicado, y no lo intentaremos en este punto. Por el contrario, presentaremos algunos ejemplos donde es posible inferir el tipo, y otros ejemplos donde el mecanismo de inferencia de tipos de **HULK** no será capaz de deducirlo.

El caso más sencillo, es cuando en una declaración de variable se omite el tipo. En este caso, el tipo se infiere de la expresión de inicialización:

```HULK
let x=3+2 in case x of y:Number -> print("Ok);
```

De igual forma sucede con los atributos de una clase, cuando pueden ser inferidos por el tipo de la expresión de inicialización:

```HULK
class Point(x:Number, y:Number) {
    x=x;
    y=y;
    # ...
}
```

Un caso más complejo es cuando se deja sin especificar el tipo de retorno de una función, pero puede ser inferido por a partir de su cuerpo:

```HULK
function succ(n:Number) -> n + 1;
```

En el caso anterior, es fácil inferir el tipo de retorno de `succ` porque la expresión retorna exactamente el mismo tipo que un argumento. En estos casos, es posible incluso no especificar el tipo del argumento, ya que el operador `+` solo está definido para `Number`:

```HULK
function succ(n) -> n + 1;
```

Sin embargo, a veces no es posible inferir el tipo de un argumento a partir de su uso _dentro del cuerpo_ de una función. En el caso siguiente, aunque sabemos que el tipo del argumento `p` debe ser `Point` para aceptar la invocación, _no se garantiza_ que el mecanismo de inferencia de tipos deba deducirlo (ya que en el futuro puede haber otras clases con un método `translate`). Dependiendo de la implementación, en estos casos se permite lanzar error semántico indicando que no fue posible inferir el tipo del argumento `p`.

```HULK
function step(p) -> p.translate(1,1);

let p = new Point(0,0) in step(p); # Puede lanzar error semántico
```

Por último, especial complejidad acarrean las funciones recursivas:

```HULK
function fact(n) -> if (n<0) 1 else n*fact(n-1);
```

El ejemplo anterior permite inferir simultáneamente el tipo del argumento `n` y del retorno, ya que se usa el retorno de la función recursiva en una operación `+` que solo está definida para `Number`. Sin embargo, en el ejemplo siguiente:

```HULK
function ackermann(m, n) ->
    if   (m==0) n+1
    elif (n==0) ackermann(m-1, 1)
    else        ackermann(m-1, ackermann(m, n-1));
```

Como el tipo de retorno no se utiliza explícitamente en una operación matemática, no es trivial deducir que su tipo de retorno es `Number`, ya que `Object` funcionaría también como tipo de retorno. En estos casos, se desea que el mecanismo de inferencia deduzca _el tipo más concreto_ para el retorno y _el tipo más abstracto_ para los argumentos que sea posible.

Finalmente, dos funciones mutuamente recursivas:

```HULK
def f(a, b) -> is (a==1) b else g(a+1, b/2);
def g(a, b) -> if (b==1) a else f(a/2, b+1);
```

En este caso, es posible teóricamente inferir que `f` y `g` deben ambos retornar tipo `Number`, pero dada la complejidad de manejar la inferencia de tipos en más de una función a la vez, no se garantiza que sea posible deducir los tipos en este caso.

Cuando se crea un _array_, es posible inferir el tipo estático si se provee una expresión de inicialización:

```HULK
let x = new [20]{ i -> (i+1)*(i+2) } in ... # Infiere Number
```

Sin embargo, si en la expresión de inicialización se usa el propio _array_, entonces no se garantiza que sea posible inferir el tipo:

```HULK
let x = new [20]{ i -> if (i<=1) 1 else x[i-1] + x[i-2] } in ...
```

### _Null-safety_ en **HULK**

Gracias a la existencia de la instrucción `with`, un compilador de **HULK** debe ser capaz de inferir para un programa si es seguro garantizar que no habrá errores en ejecución por variables `Null`. Es posible entonces que un compilador genere en estos casos un código más eficiente, al no tener que validar las referencias en todos los accesos y usos. En todos los casos en que no se pueda garantizar la _null-safety_, el compilador debe emitir una advertencia en tiempo de compilación (_warning_).

Opcionalmente, el compilador de **HULK** puede ejecutarse en modo **null-safe**. En este modo, las advertencias por violación de _null-safety_ se convierten en errores de compilación.

Nótese que no es estrictamente necesario usar `with` en todos los casos para garantizar la _null-safety_. Hay casos en que por el contexto es posible garantizar la seguridad.
El caso más sencillo es cuando se usan variables de tipo `Number` o `Boolean`, que por definición no pueden contener un valor `Null`.

Un caso más interesante es cuando se puede inferir por la inicialización de una variable, por ejemplo:

```HULK
let x = new Person("John Doe") in print(x.greet());
```

En este caso se puede inferir que `x` nunca será `Null` pues no existe ninguna asignación, y el valor de la expresión `Person(...)` nunca es `Null`.

Por el contrario, si se usa un ciclo o una expresión `if` sin parte `else`, no es posible garantizar _null-safety_, incluso cuando realmente el valor de la expresión no pueda ser `Null`.

```HULK
let i=n, x=(while (i > 0) i:=i-1) in print(x);
```

Así mismo, en los argumentos de una función nunca será posible garantizar _null-safety_.

De manera general el compilador de **HULK** hará todo lo posible por inferir si cada uso es _null-safe_, incluso cuando no se introduzca una expresión `with`. En los casos en que no sea posible inferirlo, el programador siempre podrá introducir una expresión `with` para satisfacer al compilador.

## Formalización del lenguaje HULK

En esta sección presentaremos una descripción formal de **HULK**, en términos sintácticos, semánticos y operacionales. Esta sección debe servir como referencia para la construcción de un compilador de **HULK**, pero recomendamos las secciones anteriores que explican de forma más intuitiva todos los elementos relevantes del lenguaje.

### Sintaxis de HULK

Una gramática posible para **HULK** se muestra a continuación. Nótese que por motivos didácticos, esta gramática es ambigua. En particular, la asociatividad y prioridad de los distintos tipos de expresiones se deja sin resolver, para dar espacio a los estudiantes a que resuelvan estos problemas.

Los terminales de **HULK** son:

```Grammar
NUMBER  := [0-9]+(.[0-9]+)?
STRING  := " UNICODE* " # Todos los caracteres unicode válidos
BOOLEAN := True | False
LITERAL := NUMBER | STRING | BOOLEAN
ID      := [a-zA-Z_][a-zA-Z0-9]*
```

Un programa en **HULK** tiene tres partes: declaraciones de clases, declaraciones de funciones y una expresión opcional terminada en punto y coma (`;`):

```Grammar
<program> := [<class>]* [<function>]* [<expr> ;]
```

Una clase contiene atributos y métodos, y opcionalmente declaraciones de argumentos de clases:

```Grammar
<class>  := class ID [(<params>)] [is ID [(<args>)]] { [<attr> ;]* [<method>]* }
<params> := ID [: ID] [, ID [: ID]]*
          | epsilon
<args>   := <expr> [, <expr>]*
          | epsilon
```

Los atributos tiene un nombre, opcionalmente un tipo y una inicialización obligatoria.

```Grammar
<attr> := ID [: ID] = <expr>
```

Un método tiene un nombre, argumentos, un tipo de retorno opcional y un cuerpo. Hay 2 tipos de notaciones para métodos, una donde el cuerpo es una expresión simple (y termina en `;`) y otra donde el cuerpo es una lista de expresiones.

```Grammar
<method> := ID ( <params> ) [: ID] <body>
<body>   := -> <expr> ;
          | { [<expr> ;]+ }
```

Una función global tiene una signatura muy parecida a un método, pero requiere la palabra clave `function`:

```Grammar
<function> := function ID ( <params> ) [: ID] <body>
```

Finalmente las expresiones se dividen en 8 tipos fundamentales:

```Grammar
<expr> := <let-expr>
        | <if-expr>
        | <while-expr>
        | <case-expr>
        | <assign-expr>
        | <array-expr>
        | <inst-expr>
        | <elem-expr>
```

Una expresión de tipo `let` se compone de un bloque de inicializaciones, y un cuerpo. Igual que las funciones, este cuerpo puede ser simple o compuesto por una lista de expresiones:

```Grammar
<let-expr>  := let <decls> in <expr-body>
<decls>     := <decl> [, <decl>]*
<decl>      := ID [: ID] = <expr>
<expr-body> := <expr>
             | { [<expr> ;]+ }
```

Una expresión de tipo `if` tiene un conjunto de condiciones y opcionalmente una cláusula `else`:

```Grammar
<if-expr> := if ( <expr> ) <expr-body>
             [elif ( <expr> ) <expr-body>]*
             [else <expr-body>]
```

Una expresión de tipo `while` tiene una condición, un cuerpo, y opcionalmente una cláusula `else`:

```Grammar
<while-expr> := while ( <expr> ) <expr-body>
                [else <expr-body>]
```

Una expresión de tipo `case` tiene una expresión y un conjunto de ramas compuestas por identificador, tipo, y expresión de retorno:

```Grammar
<case-expr> := case <expr> of <case-body>
<case-body> := ID : ID -> <expr-body>
             | { [ID : ID -> <expr-body> ;]* }
```

Una asignación tiene una locación a la izquierda y una expresión a la derecha:

```Grammar
<assing-expr> := <loc> ':=' <expr>
<loc>         := <loc> '[' <expr> ']'
               | <loc> . <loc>
               | ID
```

Una expresión de creación de _array_ tiene un tipo opcional, una cantidad, y opcionalmente una cláusula de inicialización:

```Grammar
<array-expr> := new ID? '[' <expr> ']' [{ ID -> <expr> }]?
```

Una expresión de instanciación tiene un tipo y un conjunto de argumentos de clase:

```Grammar
<inst-expr> := new ID ( <args> )
```

Las expresiones elementales se componen de todas las operaciones lógicas, aritméticas, etc., además de la invocación a funciones globales, métodos, y atributos:

```Grammar
<elem-expr> := <expr> == <expr> | <expr> != <expr>
             | <expr> < <expr>  | <expr> > <expr>
             | <expr> <= <expr> | <expr> >= <expr>
             | <expr> & <expr>  | <expr> '|' <expr> | !<expr>
             | <expr> @ <expr>  | <expr> @@ <expr>
             | <expr> + <expr>  | <expr> - <expr>
             | <expr> % <expr>  | <expr> * <expr>   | <expr> / <expr>
             | <expr> [ '[' <expr> ']' ]?
             | [<expr> .] ID [( <args> )]?
             | -<expr> | ( <expr> )
```

**NOTA**: Como se ha explicado al inicio de la sección, la gramática anterior no tiene en cuenta la asociatividad ni precedencia de los diferentes tipos de expresiones. Esto se ha hecho a propósito, para permitir a los estudiantes resolver los problemas de ambigüedad resultantes del modo que consideren oportuno.

### Semántica de tipos

En **HULK** todas las expresiones tienen asociado un tipo estático, que debe ser inferido por el compilador. Cada expresión o instrucción de **HULK** tiene reglas de consistencia de tipos que deben ser verificadas por el compilador. En esta sección asumiremos que todos los tipos están explícitamente declarados. La sección siguiente explica cómo realizar la inferencia de tipos cuando existan declaraciones sin anotaciones de tipo. Para definir el tipo inferido y las restricciones de consistencia de cada tipo de expresión usaremos la notación definida en el capítulo [Semántica de Tipos](#semantics).

### Reglas para la inferencia de tipos

### Semántica operacional

## Implementando un Compilador de **HULK**

La implementación de un compilador de **HULK** tiene varios detalles y retos interesantes. A continuación queremos discutir algunas cuestiones que facilitarán esta tarea.

### Consideraciones generales

El compilador de **HULK** es un proyecto complejo, que debe ser dividido convenientemente en subproblemas, para ser atacado de forma efectiva. Si el proyecto se realiza en un equipo, existen algunos puntos importantes donde la carga puede ser divida.

El punto de división más evidente es el AST semántico, que separa todo el proceso de _parsing_ de las fases de verificación semántica y generación de código. Si se define primero una jerarquía para el AST y se usa el patrón _Visitor_, es posible dividir el trabajo al menos en 2 fases independientes: _parsing_ y chequeo semántico. Mientras un miembro del equipo construye la gramática y el _parser_, otro miembro puede implementar toda la verificación semántica, sin estorbarse mutuamente, pues la interfaz de comunicación es el AST.
Así mismo, un tercer miembro puede a partir del AST semántico implementar toda la generación de código, asumiendo que la verificación semántica es correcta, sin importar que aún no esté implementada.

Para la fase de generación de código, recomendamos que se utilice un lenguaje intermedio, similar a **CIL**. Esto permitirá nuevamente dividir el trabajo en 2 fases bien separadas. Primero se define un AST de este lenguaje intermedio, que debe ser mucho más sencillo que un AST para **HULK**. A partir de este punto, 2 personas diferentes pueden trabajar en 2 tareas: la transformación del AST semántico al AST de **CIL**, y la transformación de este AST a MIPS.

De modo que existen al menos 4 tareas del compilador que pueden implementarse en paralelo, estableciendo como interfaces de comunicación 2 ASTs, 1 para **HULK** y uno para **CIL**. Las tareas opcionales de inferencia de tipos y optimización de código también ser incluidas en este esquema de forma no disruptiva. Esto queda resumido en la siguiente gráfica:

```python echo=False, results="plain"
Pipeline(['HULK', 'AST-HULK', 'AST-CIL', 'MIPS'], [
    (0, 1, 'Parser\nLexer'),
    (1, 1, 'Semántica\nInferencia'),
    (1, 2, 'Generación'),
    (2, 2, 'Optimización'),
    (2, 3, 'Generación')
]).print(width="100%", float=False)
```

### Flujo de trabajo

El lenguaje **HULK** ha sido diseñado de forma que su compilador pueda implementarse *bottom-up*. Esto es, en vez de implementar cada fase del compilador (_lexer_, _parser_, semántico, generación de código) de forma secuencial, proponemos que se tomen las características del lenguaje (expresiones, funciones, clases) y se vayan adicionando, en cada momento implementando las modificaciones que cada fase requiera. A continuación proponemos un orden para implementar las características del lenguaje. En cada paso, sugerimos implementar _todas_ las fases, es decir, introducir los tipos de _token_ nuevos, producciones en la gramática, nodos del AST, reglas de verificación semántica y generación de código.

#### Expresiones Aritméticas

Implementar los operadores `+`, `-`, `*`, `/` y `%`, y el tipo `Number`. En este punto su compilador debe ser capaz de compilar programas como el siguiente:

```HULK
(34.1 * (123.42 - 208)) / (24 + 9)
```

Para resolver este subproblema deberá:

- Implementar un tokenizador básico de expresiones aritméticas.
- Diseñar una gramática no-ambigüa de expresiones.
- Construir un AST correspondiente.
- Construir un visitor para generar código de 3

### Casos de prueba
